{"version":3,"sources":["../node_modules/@coreui/react/lib/Switch.js","screens/Campaign/AddCampaign.js","screens/Campaign/GetAllCampaignDataTables.js","screens/Campaign/EditCampaign.js","screens/Campaign/CampaignStatus.js","screens/Campaign/Campaign.js"],"names":["exports","__esModule","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_react","require","_react2","_interopRequireDefault","_propTypes2","_classnames2","obj","default","string","bool","oneOfType","oneOf","any","func","defaultProps","color","label","outline","size","checked","defaultChecked","undefined","disabled","required","type","variant","dataOn","dataOff","AppSwitch","_Component","props","instance","Constructor","TypeError","_classCallCheck","this","_this","self","ReferenceError","_possibleConstructorReturn","handleChange","bind","handleKeyDown","handleKeyUp","state","uncontrolled","selected","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_inherits","toggleState","check","setState","event","onChange","preventDefault","componentDidUpdate","prevProps","prevState","render","_props","className","name","attributes","keys","indexOf","_objectWithoutProperties","tabindex","tabIndex","classes","inputClasses","sliderClasses","createElement","onKeyUp","onKeyDown","Component","propTypes","module","toast","configure","AddCampaign","buttonLabelView","errorInput","currentUser","useState","modal","setModal","addCampaignClick","e","JSON","parse","localStorage","getItem","formID","role","document","querySelector","formData","FormData","get","channel","description","XMLHttpRequest","onreadystatechange","readyState","status","alert","errorInputName","error","append","axios","post","APP_CONFIG","API_CREATE_CAMPAIGN","headers","ContentType","Authorization","token","then","res","success","setTimeout","window","location","reload","catch","response","request","toggle","onClick","style","backgroundColor","borderRadius","paddingLeft","paddingRight","paddingTop","paddingBottom","float","fontFamily","Modal","isOpen","Form","id","onSubmit","ModalHeader","ModalBody","closeButton","FormGroup","row","Label","htmlFor","sm","md","offset","Col","Input","placeholder","channelData","map","ModalFooter","borderColor","textTransform","GetAllCampaignDataTables","data","columns","field","sort","width","height","rows","posts","small","theadColor","responsiveXl","responsiveSm","btn","striped","sortable","bordered","noBottomColumns","EditCampaign","modal2","setModal2","toggleEdit","fontSize","fontWeigth","defaultValue","selectedSubscriptionName","selectedChannelName","selectedDescription","updatedOn","Date","put","API_UPDATE_CAMPAIGN","selectedSubscriptionId","CampaignStatus","switchStatusList","switchStatus","statusCheck","statusClick","campaignStatus","API_CHANGE_CAMPAIGN_STATUS","errCode","errMsg","selectedcampaignStatus","selectedcampaignId","Campaign","loading","_that","API_GET_CHANNEL","postChannelResults","channels","API_GET_CAMPAIGN","currentUserErrorCode","postcampaigns","campaigns","postCampaignsData","postList","dateCreated","createdOn","dateUpdated","active","toString","substring","action","campaignDataToGetChannelData","href","removeItem"],"mappings":"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","file":"static/js/48.c7b34b5a.chunk.js","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar propTypes = {\n  color: _propTypes2.default.string,\n  label: _propTypes2.default.bool,\n  outline: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.string, _propTypes2.default.oneOf(['', 'alt'])]),\n  size: _propTypes2.default.oneOf(['', 'lg', 'sm']),\n  checked: _propTypes2.default.bool,\n  defaultChecked: _propTypes2.default.bool,\n  defaultValue: _propTypes2.default.any,\n  value: _propTypes2.default.string,\n  disabled: _propTypes2.default.bool,\n  form: _propTypes2.default.any,\n  name: _propTypes2.default.string,\n  required: _propTypes2.default.bool,\n  onChange: _propTypes2.default.func,\n  type: _propTypes2.default.oneOf(['checkbox', 'radio']),\n  variant: _propTypes2.default.oneOf(['', '3d', 'pill']),\n  className: _propTypes2.default.string,\n  dataOn: _propTypes2.default.string,\n  dataOff: _propTypes2.default.string\n};\n\nvar defaultProps = {\n  color: 'secondary',\n  label: false,\n  outline: false,\n  size: '',\n  checked: false,\n  defaultChecked: undefined,\n  disabled: undefined,\n  required: undefined,\n  type: 'checkbox',\n  variant: '',\n  dataOn: 'On',\n  dataOff: 'Off'\n};\n\nvar AppSwitch = function (_Component) {\n  _inherits(AppSwitch, _Component);\n\n  function AppSwitch(props) {\n    _classCallCheck(this, AppSwitch);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.handleChange = _this.handleChange.bind(_this);\n    _this.handleKeyDown = _this.handleKeyDown.bind(_this);\n    _this.handleKeyUp = _this.handleKeyUp.bind(_this);\n    _this.state = {\n      uncontrolled: !!_this.props.defaultChecked,\n      checked: _this.props.defaultChecked || _this.props.checked,\n      selected: []\n    };\n    return _this;\n  }\n\n  AppSwitch.prototype.toggleState = function toggleState(check) {\n    this.setState({\n      checked: check\n    });\n  };\n\n  AppSwitch.prototype.handleChange = function handleChange(event) {\n    var target = event.target;\n    this.toggleState(target.checked);\n\n    if (this.props.onChange) {\n      this.props.onChange(event);\n    }\n  };\n\n  AppSwitch.prototype.handleKeyDown = function handleKeyDown(event) {\n    if (event.key === ' ') {\n      event.preventDefault();\n    }\n  };\n\n  AppSwitch.prototype.handleKeyUp = function handleKeyUp(event) {\n    if (event.key === 'Enter' || event.key === ' ') {\n      this.toggleState(!this.state.checked);\n    }\n  };\n\n  AppSwitch.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    if (!this.state.uncontrolled && this.props.checked !== prevState.checked) {\n      this.toggleState(this.props.checked);\n    }\n  };\n\n  AppSwitch.prototype.render = function render() {\n    var _props = this.props,\n        className = _props.className,\n        disabled = _props.disabled,\n        color = _props.color,\n        name = _props.name,\n        label = _props.label,\n        outline = _props.outline,\n        size = _props.size,\n        required = _props.required,\n        type = _props.type,\n        value = _props.value,\n        dataOn = _props.dataOn,\n        dataOff = _props.dataOff,\n        variant = _props.variant,\n        attributes = _objectWithoutProperties(_props, ['className', 'disabled', 'color', 'name', 'label', 'outline', 'size', 'required', 'type', 'value', 'dataOn', 'dataOff', 'variant']);\n\n    var tabindex = attributes.tabIndex;\n    delete attributes.tabIndex;\n    delete attributes.checked;\n    delete attributes.defaultChecked;\n    delete attributes.onChange;\n\n    var classes = (0, _classnames2.default)(className, 'switch', label ? 'switch-label' : false, size ? 'switch-' + size : false, variant ? 'switch-' + variant : false, 'switch' + (outline ? '-outline' : '') + '-' + color + (outline === 'alt' ? '-alt' : ''), 'form-check-label');\n\n    var inputClasses = (0, _classnames2.default)('switch-input', 'form-check-input');\n\n    var sliderClasses = (0, _classnames2.default)('switch-slider');\n\n    return _react2.default.createElement(\n      'label',\n      { className: classes, tabIndex: tabindex, onKeyUp: this.handleKeyUp, onKeyDown: this.handleKeyDown },\n      _react2.default.createElement('input', _extends({ type: type,\n        className: inputClasses,\n        onChange: this.handleChange,\n        checked: this.state.checked,\n        name: name,\n        required: required,\n        disabled: disabled,\n        value: value,\n        'aria-checked': this.state.checked,\n        'aria-disabled': disabled,\n        'aria-readonly': disabled\n      }, attributes)),\n      _react2.default.createElement('span', { className: sliderClasses, 'data-checked': dataOn, 'data-unchecked': dataOff })\n    );\n  };\n\n  return AppSwitch;\n}(_react.Component);\n\nAppSwitch.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nAppSwitch.defaultProps = defaultProps;\n\nexports.default = AppSwitch;\nmodule.exports = exports['default'];","import React, { useState, Component } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Spinner, Col, FormGroup, Form, Label, Input, Card } from 'reactstrap';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport * as APP_CONFIG from '../../config/config';\r\nimport axios from 'axios';\r\nimport Switch from '@coreui/react/lib/Switch';\r\n\r\ntoast.configure()\r\n\r\nconst AddCampaign = (props) => {\r\n    const {\r\n        buttonLabelView,\r\n        className,\r\n        errorInput = \"\",\r\n        currentUser = \"\"\r\n    } = props;\r\n\r\n    const [modal, setModal] = useState(false);\r\n\r\n\r\n    function addCampaignClick(e) {\r\n        e.preventDefault();\r\n\r\n        \r\n        const currentUser = JSON.parse(localStorage.getItem(\"currentUser\"));\r\n        const createdBy = currentUser?.role;\r\n\r\n        let formID = document.querySelector(\"#channelData\");\r\n        const formData = new FormData(formID);\r\n\r\n        var name = formData.get('name');\r\n        var channel = formData.get('channel');\r\n        \r\n        var description = formData.get('description');\r\n\r\n        var request = new XMLHttpRequest();\r\n\r\n        request.onreadystatechange = function () {\r\n            if (this.readyState === 4 & this.status === 200) {\r\n                alert('Uploaded!');\r\n            }\r\n        };\r\n\r\n        let errorInputName = \"* Name field may be empty\";\r\n        let errorInputChannel = \"* Channel field may be empty\";\r\n        let errorInputDescription = \"* Description field may be empty\";\r\n\r\n\r\n        if (name == \"\" && channel === null && description == \"\") {\r\n            \r\n            toast.error(errorInputName);\r\n            toast.error(errorInputChannel);\r\n            toast.error(errorInputDescription);\r\n        }\r\n        else if (name == \"\" && channel === null) {\r\n            // alert(errorInput);\r\n            toast.error(errorInputName);\r\n            toast.error(errorInputChannel);\r\n        }\r\n        else if (channel === null && description == \"\") {\r\n            // alert(errorInput);\r\n            toast.error(errorInputChannel);\r\n            toast.error(errorInputDescription);\r\n        }\r\n        else if (name == \"\" && description == \"\") {\r\n            // alert(errorInput);\r\n            toast.error(errorInputName);\r\n            toast.error(errorInputDescription);\r\n        }\r\n        else if (channel === null) {\r\n            // alert(errorInput);\r\n            toast.error(errorInputDescription);\r\n        }\r\n        else if (description == \"\") {\r\n            // alert(errorInput);\r\n            toast.error(errorInputName);\r\n        }\r\n        else {\r\n            const channelForm = new FormData();\r\n            channelForm.append('channelForm', '{\"name\": \"' + name + '\",\"channel\": \" ' + channel + '\", \"description\": \" ' + description + '\"} ')\r\n\r\n            let _that = this;\r\n\r\n\r\n\r\n            axios.post(APP_CONFIG[APP_CONFIG.REACT_APP_ENVIRONMENT].API_CREATE_CAMPAIGN,\r\n                {\r\n                    \"active\": false,\r\n                    \"channelId\": channel,\r\n                    \"description\": description,\r\n                    \"isActive\": false,\r\n                    \"label\": name\r\n                },\r\n                {\r\n                    headers: {\r\n\r\n                        ContentType: \"application/json\",\r\n                        Authorization: currentUser.token\r\n                    }\r\n                }).then(function (res) {\r\n                    //handle success\r\n                    // const notify = () => toast(\"Wow so easy !\");\r\n                    toast.success('Added Campaign Successfully');\r\n                    setTimeout(function () {\r\n                        window.location.reload();\r\n                    }, 1000)\r\n                }).catch(function (error) {\r\n                    if (error.response) {\r\n                        /*\r\n                         * The request was made and the server responded with a\r\n                         * status code that falls out of the range of 2xx\r\n                         */\r\n                        toast.error('Error Adding Campaign **');\r\n                    } else if (error.request) {\r\n                        /*\r\n                         * The request was made but no response was received, `error.request`\r\n                         * is an instance of XMLHttpRequest in the browser and an instance\r\n                         * of http.ClientRequest in Node.js\r\n                         */\r\n                        toast.error('Error Adding Campaign ***');\r\n                    } else {\r\n                        // Something happened in setting up the request and triggered an Error\r\n                    \r\n                        toast.error('Error Adding Campaign ****');\r\n                    }\r\n                });\r\n\r\n        }\r\n\r\n\r\n    }\r\n    // if(document.querySelector(\"#channelData\") === null){\r\n    //     alert('ggg')\r\n    // }\r\n\r\n    // Intialize modal\r\n    const toggle = () => setModal(!modal);\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {/* Button in table for Create Campaign */}\r\n\r\n            <button className=\"btn btn-lg icon-plus\" onClick={toggle} style={{ backgroundColor: '#E60000', color: '#fff', borderRadius: 10, paddingLeft: 10, paddingRight: 10, paddingTop: 5, paddingBottom: 5, float: 'right' }} role=\"button\"><a style={{ fontFamily: 'Roboto' }}> Create Campaign </a></button>\r\n\r\n            <br />\r\n            {/* Create modal for  */}\r\n            <Modal isOpen={modal} size=\"lg\" toggle={toggle} className={className}>\r\n                <Form id=\"channelData\" onSubmit={addCampaignClick}>\r\n                    {/* modal content for the head section */}\r\n                    <ModalHeader toggle={toggle}><a style={{ fontFamily: 'Roboto' }}> <h4>Create Campaign </h4></a>\r\n\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <ToastContainer closeButton={false} style={{ color: '#fff' }} />\r\n\r\n                        {/* \r\n                        <a style={{ color: 'red' }} className=\"float-right\">\r\n                            * Required\r\n                            </a> */}\r\n                        <br />\r\n                        <div className=\"container\">\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"name\" sm=\"12\" md={{ size: 2, offset: 1 }} style={{color: '#E60000'}}><a style={{ color: 'black' }}>*</a>Name:</Label>\r\n                                <Col sm=\"12\" md={{ size: 8, offset: 0 }} style={{ paddingLeft: '15px' }}>\r\n                                    <Input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Please provide name\" required />\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"channel\" sm=\"12\" md={{ size: 2, offset: 1 }} style={{color: '#E60000'}}><a style={{ color: 'black' }}>*</a>Channel:</Label>\r\n                                <Col sm=\"12\" md={{ size: 8, offset: 0 }} >\r\n                                    <Input type=\"select\" name=\"channel\" id=\"channel\" required>\r\n                                        {\r\n                                            props?.channelData?.map((post, id) => {\r\n                                            return <option key={id} value={post?.id}>{post?.label}</option>                                            })\r\n                                        }\r\n                                        {/* <option value=\"mva App\">MVA App</option>\r\n                                        <option value=\"mva Web\">MVA Web</option>\r\n                                        <option value=\"flyTxt\">Fly TxT</option> */}\r\n                                    </Input>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"description\" sm=\"12\" md={{ size: 2, offset: 1 }} style={{color: '#E60000'}}><a style={{ color: 'black' }}>*</a>Description:</Label>\r\n                                <Col sm=\"12\" md={{ size: 8, offset: 0 }}>\r\n                                    <Input type=\"textarea\" name=\"description\" id=\"description\" placeholder=\"Please provide description details\" required />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </div>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <div className=\"btn-group\">\r\n                            <a style={{ paddingRight: '5px'}}>\r\n                            <button className=\"btn btn-lg\" onClick={toggle} style={{ backgroundColor: '#000', color: '#fff', borderColor: 'green', borderRadius: 10, paddingLeft: 5, paddingRight: 5, paddingTop: 0, paddingBottom: 0, textTransform: 'unset' }}>Cancel</button>{' '}\r\n                            </a>\r\n\r\n                            <button type=\"submit\" onClick={addCampaignClick} className=\"btn btn-lg\" style={{ backgroundColor: '#E60000', color: '#fff', borderColor: 'green', borderRadius: 10, paddingLeft: 5, paddingRight: 5, paddingTop: 0, paddingBottom: 0, textTransform: 'unset' }} >Confirm</button>\r\n                        </div>\r\n                    </ModalFooter>\r\n                </Form>\r\n\r\n            </Modal>\r\n\r\n            {/* \r\n            <Card>\r\n                <br /><br />\r\n                <Form id=\"channelData\" onSubmit={addCampaignClick}><p></p> <br />\r\n                    <div style={{ float: 'right', paddingRight: '28px' }}>\r\n                        \r\n                    </div><br /> \r\n                        <a style={{ color: 'red', paddingLeft: '26px' }} >\r\n                            * Required\r\n                        </a>\r\n                        <br />\r\n                        <div className=\"container\">\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"name\" sm=\"12\" md={{ size: 2, offset: 1 }} >Name:<a style={{ color: 'red'}}>*</a></Label>\r\n                                <Col sm=\"12\" md={{ size: 8, offset: 0 }} style={{ paddingLeft: '15px' }}>\r\n                                    <Input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Please provide name\" required />\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"channel\" sm=\"12\" md={{ size: 2, offset: 1 }}>Channel:<a style={{ color: 'red' }}>*</a></Label>\r\n                                <Col sm=\"12\" md={{ size: 8, offset: 0 }} >\r\n                                    <Input type=\"select\" name=\"channel\" id=\"channel\" required>\r\n                                        \r\n                                        <option disabled selected>Please select channel</option>\r\n                                        <option value=\"sms\">SMS</option>\r\n                                        <option value=\"mva App\">MVA App</option>\r\n                                        <option value=\"mva Web\">MVA Web</option>\r\n                                        <option value=\"flyTxt\">Fly TxT</option>\r\n                                    </Input>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"description\" sm=\"12\" md={{ size: 2, offset: 1 }}>Description:<a style={{ color: 'red' }}>*</a></Label>\r\n                                <Col sm=\"12\" md={{ size: 8, offset: 0 }}>\r\n                                    <Input type=\"textarea\" name=\"description\" id=\"description\" placeholder=\"Please provide description details\" required />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </div>\r\n                        \r\n                        <br />\r\n                        <card style={{ float: 'right'}}>\r\n                        <br />\r\n                        <div className=\"btn-group\">\r\n                            <button onClick={toggle} className=\"btn btn-lg\" style={{ backgroundColor: '#E60000', color: '#fff', borderColor: 'green', borderRadius: 10, paddingLeft: 10, paddingRight: 10, paddingTop: 0, paddingBottom: 0, textTransform: 'unset' }} >Submit</button>\r\n                        </div>\r\n                    </card>\r\n                </Form>\r\n            </Card>\r\n        \r\n         */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddCampaign;","import React from 'react';\r\nimport { MDBContainer, MDBDataTable, MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\r\nimport $ from 'jquery';\r\n\r\n\r\nconst GetAllCampaignDataTables = ({ posts }) => {\r\n    \r\n    const data = {\r\n        columns: [\r\n            {\r\n                label: '#',\r\n                field: 'id',\r\n                sort: 'disabled',\r\n                width: 1\r\n            }, \r\n            {\r\n                label: 'Label',\r\n                field: 'label',\r\n                sort: 'dsc',\r\n                width: 40\r\n            }, \r\n            {\r\n                label: 'Description',\r\n                field: 'description',\r\n                sort: 'asc',\r\n                width: '40'\r\n            },\r\n            {\r\n                label: 'Created On',\r\n                field: 'createdOn',\r\n                sort: 'asc',\r\n                width: 40\r\n            },\r\n            {\r\n                label: 'Status',\r\n                field: 'status',\r\n                sort: 'disabled',\r\n                width: '5px',\r\n                height: 5\r\n            },\r\n            {\r\n                label: '',\r\n                field: 'action',\r\n                sort: 'disabled',\r\n                width: 50,\r\n                height: 5\r\n            }\r\n        ],\r\n                rows: posts\r\n    };\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <MDBDataTable \r\n                id=\"idforSubscription\"\r\n                small\r\n                theadColor = \"white\" \r\n                responsiveXl \r\n                responsiveSm \r\n                btn\r\n                striped \r\n                data={data } \r\n                sortable={ true } \r\n                bordered\r\n                noBottomColumns            \r\n            />\r\n        </MDBContainer>\r\n    );\r\n};\r\n\r\nexport default GetAllCampaignDataTables;","import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Label, FormGroup, Form, Col } from 'reactstrap';\r\nimport { MDBIcon, MDBBtn, MDBBtnGroup } from 'mdbreact';\r\nimport axios from 'axios';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport * as APP_CONFIG from '../../config/config';\r\n\r\n\r\ntoast.configure()\r\n\r\nconst EditCampaign = (props) => {\r\n    const {\r\n        buttonLabelView,\r\n        className\r\n    } = props;\r\n\r\n    const [modal2, setModal2] = useState(false);\r\n\r\n\r\n\r\n    // Intialize modals\r\n    const toggleEdit = () => setModal2(!modal2);\r\n\r\n    function closeModal(e) {\r\n        e.preventDefault();\r\n        setModal2(false);\r\n     \r\n    }\r\n\r\n    function editCampaignClick(e) {\r\n        e.preventDefault();\r\n\r\n        const currentUser = JSON.parse(localStorage.getItem(\"currentUser\"));\r\n        const createdBy = currentUser?.role;\r\n\r\n        let formID = document.querySelector(\"#campaignlData\");\r\n        const formData = new FormData(formID);\r\n\r\n        var name = formData.get('name');\r\n        var channel = formData.get('channel');\r\n        var description = formData.get('description');\r\n\r\n        var request = new XMLHttpRequest();\r\n\r\n        request.onreadystatechange = function () {\r\n            if (this.readyState === 4 & this.status === 200) {\r\n                alert('Uploaded!');\r\n            }\r\n        };\r\n\r\n        let errorInputName = \"* Name field may be empty\";\r\n        let errorInputChannel = \"* Channel field may be empty\";\r\n        let errorInputDescription = \"* Description field may be empty\";\r\n\r\n\r\n        if (name == \"\" && channel === null && description == \"\") {\r\n            toast.error(errorInputName);\r\n            toast.error(errorInputChannel);\r\n            toast.error(errorInputDescription);\r\n        }\r\n        else if (name == \"\" && channel === null) {\r\n            // alert(errorInput);\r\n            toast.error(errorInputName);\r\n            toast.error(errorInputChannel);\r\n        }\r\n        else if (channel === null && description == \"\") {\r\n            // alert(errorInput);\r\n            toast.error(errorInputChannel);\r\n            toast.error(errorInputDescription);\r\n        }\r\n        else if (name == \"\" && description == \"\") {\r\n            // alert(errorInput);\r\n            toast.error(errorInputName);\r\n            toast.error(errorInputDescription);\r\n        }\r\n        else if (channel === null) {\r\n            // alert(errorInput);\r\n            toast.error(errorInputDescription);\r\n        }\r\n        else if (description == \"\") {\r\n            // alert(errorInput);\r\n            toast.error(errorInputName);\r\n        }\r\n        else {\r\n            const channelForm = new FormData();\r\n            channelForm.append('channelForm', '{\"name\": \"' + name + '\",\"channel\": \" ' + channel + '\", \"description\": \" ' + description + '\"} ');\r\n\r\n            let _that = this;\r\n            let updatedOn = new Date();\r\n\r\n\r\n\r\n            axios.put(APP_CONFIG[APP_CONFIG.REACT_APP_ENVIRONMENT].API_UPDATE_CAMPAIGN,\r\n                {\r\n                    \"active\": true,\r\n                    \"id\": props.selectedSubscriptionId,\r\n                    \"updatedOn\": updatedOn,\r\n                    \"description\": description,\r\n                    \"label\": name,\r\n                    \"channel\": channel \r\n                },\r\n                {\r\n                    headers: {\r\n\r\n                        ContentType: \"application/json\",\r\n                        Authorization: currentUser.token\r\n                    }\r\n                }).then(function (res) {\r\n                    //handle success\r\n                    toast.success('Campaign Edited Successfully');\r\n                    setTimeout(function () {\r\n                        window.location.reload();\r\n                    }, 1000)\r\n                }).catch(function (error) {\r\n                    if (error.response) {\r\n                        /*\r\n                         * The request was made and the server responded with a\r\n                         * status code that falls out of the range of 2xx\r\n                         */\r\n                        toast.error('Error Editing Campaign **');\r\n                    } else if (error.request) {\r\n                        /*\r\n                         * The request was made but no response was received, `error.request`\r\n                         * is an instance of XMLHttpRequest in the browser and an instance\r\n                         * of http.ClientRequest in Node.js\r\n                         */\r\n                        toast.error('Error Editing Campaign ***');\r\n                    } else {\r\n                        // Something happened in setting up the request and triggered an Error\r\n                       toast('Error Editing Campaign ****');\r\n                    }\r\n                });\r\n\r\n        }\r\n\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            \r\n            <a className=\"link\" onClick={toggleEdit} style={{ color: 'blue', fontFamily: \"san-serif\" }}>\r\n                Edit\r\n            </a>\r\n            \r\n            {/*  modal for Edit */}\r\n            <Modal  isOpen={modal2} toggle={toggleEdit} className={className} size=\"lg\">\r\n                <Form id=\"campaignlData\">\r\n                    {/* modal content for the head section */}\r\n                    <ModalHeader style={{ fontSize: \"1em\", fontWeigth: \"bolder\"}} >Edit Campaign </ModalHeader>\r\n                    \r\n                    {/* modal content for the body section */}\r\n                    <ModalBody>\r\n                        <br />\r\n                        <div className=\"container\">\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"name\" sm=\"12\" md={{ size: 2, offset: 1 }} style={{color: '#E60000'}}><a style={{ color: 'black' }}>*</a> Name:</Label>\r\n                                <Col sm=\"12\" md={{ size: 8, offset: 0 }} style={{ paddingLeft: '15px' }}>\r\n                                    <Input type=\"text\" name=\"name\" id=\"name\" defaultValue={props.selectedSubscriptionName} />\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"channel\" sm=\"12\" md={{ size: 2, offset: 1 }} style={{color: '#E60000'}}><a style={{ color: 'black' }}>*</a>Channel:</Label>\r\n                                <Col sm=\"12\" md={{ size: 8, offset: 0 }} >\r\n                                    \r\n                                    <Input type=\"select\" name=\"channel\" id=\"channel\" required>\r\n                                        <option>{props?.selectedChannelName}</option>\r\n                                        {\r\n                                            props?.channelData?.map((post, id) => {\r\n                                            return <option key={id} value={post?.label}>{post?.label}</option>                                            })\r\n                                        }\r\n                                        {/* <option value=\"mva App\">MVA App</option>\r\n                                        <option value=\"mva Web\">MVA Web</option>\r\n                                        <option value=\"flyTxt\">Fly TxT</option> */}\r\n                                    </Input>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"description\" sm=\"12\" md={{ size: 2, offset: 1 }} style={{color: '#E60000'}}><a style={{ color: 'black' }}>*</a>Description:\r\n                                </Label>\r\n                                <Col sm=\"12\" md={{ size: 8, offset: 0 }}>\r\n                                    <Input type=\"textarea\" name=\"description\" id=\"description\" defaultValue={props.selectedDescription} />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </div>\r\n                   \r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <div className=\"btn-group\">\r\n                            {/* <a style={{paddingRight: 10}}> */}\r\n                            <a style={{paddingRight: '5px'}}>\r\n                            <button className=\"btn btn-lg\" onClick={closeModal} style={{ backgroundColor: '#000', color: '#fff', borderColor: 'green', borderRadius: 10, paddingLeft: 5, paddingRight: 5, paddingTop: 0, paddingBottom: 0, textTransform: 'unset' }}>Cancel</button>\r\n                            </a>\r\n                            \r\n\r\n                            <button className=\"btn btn-lg\" onClick={editCampaignClick} type=\"submit\" style={{ backgroundColor: '#E60000', color: '#fff', borderColor: 'green', borderRadius: 10, paddingLeft: 5, paddingRight: 5, paddingTop: 0, paddingBottom: 0, textTransform: 'unset' }} >Submit</button>\r\n\r\n                        </div>\r\n                    </ModalFooter>\r\n                </Form>\r\n            </Modal>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default EditCampaign;","import React, { Fragment, useState} from 'react';\r\nimport axios from 'axios';\r\nimport * as APP_CONFIG from '../../config/config';\r\nimport { MDBIcon, MDBBtn, MDBBtnGroup } from 'mdbreact';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\nconst CampaignStatus = (props) => {\r\n    const {\r\n        switchStatusList= {},\r\n        switchStatus= \"\",\r\n        currentUser={}\r\n    }=props;\r\n\r\n    const [status, statusCheck] = useState(false);\r\n    \r\n    function statusClick(id, e, status){\r\n        // e.preventDefault();\r\n        const currentUser = JSON.parse(localStorage.getItem(\"currentUser\"));\r\n    \r\n        const createdBy = currentUser?.role;\r\n        let campaignStatus = e.target.checked;\r\n\r\n        axios.post(APP_CONFIG[APP_CONFIG.REACT_APP_ENVIRONMENT].API_CHANGE_CAMPAIGN_STATUS + id + '/' + campaignStatus,\r\n            {\r\n                \"id\": id,\r\n                \"status\": campaignStatus\r\n            },\r\n            {\r\n                headers: {\r\n\r\n                    ContentType: \"application/json\",\r\n                    Authorization: currentUser.token\r\n                }\r\n            }).then(function (res) {\r\n                //handle success\r\n                if(res.data.errCode == 0){\r\n                    toast.success('Changed Campaign Status Successfully');\r\n                }\r\n                else( \r\n                    toast.error(res.data.errMsg)\r\n                )\r\n\r\n            }).catch(function (error) {\r\n                if (error.response) {\r\n                    /*\r\n                     * The request was made and the server responded with a\r\n                     * status code that falls out of the range of 2xx\r\n                     */\r\n\r\n                    toast.error('Error Changing Campaign Status **');\r\n                } else if (error.request) {\r\n                    /*\r\n                     * The request was made but no response was received, `error.request`\r\n                     * is an instance of XMLHttpRequest in the browser and an instance\r\n                     * of http.ClientRequest in Node.js\r\n                     */\r\n                    toast.error('Error Changing Campaign Status***');\r\n                } else {\r\n                    // Something happened in setting up the request and triggered an Error\r\n\r\n                    toast.error('Error Changing Campaign Status ****');\r\n                }\r\n            });\r\n\r\n\r\n        if (status == null || status == \"\" || status == \"undefined\") {\r\n            status = false;\r\n        }\r\n        if (status == true) {\r\n            statusCheck(prevState => {\r\n                let newStatus = { ...prevState, switchStatusList: { ...prevState.switchStatusList, [id]: false } }\r\n                // console.log(\"newDtatus true  ==>\", newStatus.switchStatusList[id] )\r\n                return newStatus\r\n            })\r\n        }\r\n        else if (status == false) {\r\n            statusCheck(prevState => {\r\n\r\n                let newStatus = { ...prevState, switchStatusList: { ...prevState.switchStatusList, [id]: true } }\r\n                // console.log(\"newDtatus false  ==>\", newStatus.switchStatusList[id])\r\n                return newStatus\r\n            })\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n                {\r\n                    props.selectedcampaignStatus ?\r\n                        <div className='custom-control custom-switch'>\r\n\r\n                            <input\r\n                                // onClick={this.statusClick(post.id, post.active)}\r\n                                type='checkbox'\r\n                                className='custom-control-input'\r\n                                id={`customSwitches-${props?.selectedcampaignId}`}\r\n                                // onClick={(e) => this.statusClick(post.id, e, this.state.switchStatusList[post.id]) }}\r\n                                defaultChecked={props?.selectedcampaignStatus}\r\n                                checked={switchStatusList[props?.selectedcampaignId]}\r\n                                onClick={(e) => statusClick(props?.selectedcampaignId, e, props?.selectedcampaignStatus)}\r\n                            />\r\n                            <label className='custom-control-label' htmlFor={`customSwitches-${props?.selectedcampaignId}`}>\r\n                            </label>\r\n                        </div>\r\n                        : []\r\n                }\r\n                {\r\n                    props?.selectedcampaignStatus === false ?\r\n                        <div className='custom-control custom-switch'>\r\n\r\n                            <input\r\n                                type='checkbox'\r\n                                className='custom-control-input'\r\n                                id={`customSwitches-${props?.selectedcampaignId}`}\r\n                                onClick={(e) => statusClick(props?.selectedcampaignId, e, props?.selectedcampaignStatus)}\r\n                            />\r\n                            <label className='custom-control-label' htmlFor={`customSwitches-${props?.selectedcampaignId}`}>\r\n                            </label>\r\n                        </div>\r\n                        : []\r\n                }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CampaignStatus;","import React, { Component, Fragment } from 'react';\r\nimport \"../Channel/channel.css\";\r\nimport AddCampaign from './AddCampaign';\r\nimport axios from 'axios';\r\nimport * as APP_CONFIG from '../../config/config';\r\nimport { MDBIcon, MDBBtn, MDBBtnGroup } from 'mdbreact';\r\nimport GetAllCampaignDataTables from './GetAllCampaignDataTables';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport EditCampaign from './EditCampaign';\r\nimport CampaignStatus from './CampaignStatus';\r\nimport { MDBContainer, MDBDataTable, MDBTable, MDBTableBody, MDBTableHead, MDBInput } from 'mdbreact';\r\n\r\nclass Campaign extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: [],\r\n            channelData: [],\r\n            currentUser: '',\r\n            selectedSubscriptionId: \"\",\r\n            loading: false,\r\n            switchStatus: '',\r\n            switchStatusList: {}\r\n\r\n        }\r\n\r\n        this.statusClick = this.statusClick.bind(this);\r\n\r\n\r\n    }\r\n\r\n    statusClick = (id, e, status) => {\r\n        // e.preventDefault();\r\n        // console.log(\"Active ==>>\", e.target.checked, \"==id ==>\", id)\r\n        const currentUser = JSON.parse(localStorage.getItem(\"currentUser\"));\r\n        this.setState({\r\n            currentUser: currentUser\r\n        });\r\n        const createdBy = currentUser?.role;\r\n        let campaignStatus = e.target.checked;\r\n\r\n        axios.post(APP_CONFIG[APP_CONFIG.REACT_APP_ENVIRONMENT].API_CHANGE_CAMPAIGN_STATUS + id + '/' + campaignStatus,\r\n            {\r\n                \"id\": id,\r\n                \"status\": campaignStatus\r\n            },\r\n            {\r\n                headers: {\r\n\r\n                    ContentType: \"application/json\",\r\n                    Authorization: currentUser.token\r\n                }\r\n            }).then(function (res) {\r\n                //handle success\r\n                // console.log(\"res ==>\", res.data.errCode)\r\n                if(res.data.errCode == 0){\r\n                    toast.success('Changed Campaign Status Successfully');\r\n                }\r\n                else( \r\n                    toast.error(res.data.errMsg)\r\n                )\r\n\r\n            }).catch(function (error) {\r\n                if (error.response) {\r\n                    /*\r\n                     * The request was made and the server responded with a\r\n                     * status code that falls out of the range of 2xx\r\n                     */\r\n\r\n                    toast.error('Error Changing Campaign Status **');\r\n                } else if (error.request) {\r\n                    /*\r\n                     * The request was made but no response was received, `error.request`\r\n                     * is an instance of XMLHttpRequest in the browser and an instance\r\n                     * of http.ClientRequest in Node.js\r\n                     */\r\n                    toast.error('Error Changing Campaign Status***');\r\n                } else {\r\n                    // Something happened in setting up the request and triggered an Error\r\n\r\n                    toast.error('Error Changing Campaign Status ****');\r\n                }\r\n            });\r\n\r\n\r\n\r\n\r\n        if (status == null || status == \"\" || status == \"undefined\") {\r\n            status = false;\r\n        }\r\n        // console.log(\"status  ==>\", status)\r\n        if (status == true) {\r\n            this.setState(prevState => {\r\n                let newStatus = { ...prevState, switchStatusList: { ...prevState.switchStatusList, [id]: false } }\r\n                // console.log(\"newDtatus true  ==>\", newStatus)\r\n                return newStatus\r\n            })\r\n        }\r\n        else if (status == false) {\r\n            this.setState(prevState => {\r\n\r\n                let newStatus = { ...prevState, switchStatusList: { ...prevState.switchStatusList, [id]: true } }\r\n                // console.log(\"newDtatus false  ==>\", newStatus)\r\n                return newStatus\r\n            })\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const currentUser = JSON.parse(localStorage.getItem(\"currentUser\"));\r\n        this.setState({\r\n            currentUser: currentUser\r\n        });\r\n        const createdBy = currentUser?.role;\r\n\r\n\r\n        let _that = this;\r\n        let _that1 = this;\r\n        this.setState({ loading: true }, () => {\r\n            // Get Channel ID and Name\r\n            axios.get(APP_CONFIG[APP_CONFIG.REACT_APP_ENVIRONMENT].API_GET_CHANNEL,\r\n                {\r\n                    headers: {\r\n                        ContentType: \"application/json\",\r\n                        Authorization: currentUser.token\r\n                    }\r\n\r\n                }\r\n            ).then(res => {\r\n\r\n                let postChannelResults = res?.data?.channels;\r\n                this.setState({\r\n                    channelData: postChannelResults\r\n                })\r\n            })\r\n\r\n            // Get Campaigns\r\n            axios.get(APP_CONFIG[APP_CONFIG.REACT_APP_ENVIRONMENT].API_GET_CAMPAIGN,\r\n                {\r\n                    headers: {\r\n                        ContentType: \"application/json\",\r\n                        Authorization: currentUser.token\r\n                    }\r\n                }\r\n            )\r\n                .then(res => {\r\n                    let currentUserErrorCode = res.data.errCode;\r\n\r\n                    let postcampaignsResults = res.data.campaigns || [];\r\n// console.log(\"postcampaignsResults==>\", postcampaignsResults);\r\n                    let postcampaigns = postcampaignsResults;\r\n\r\n                    _that.setState(prevState=>{\r\n                        return {\r\n                            postCampaignsData: postcampaigns,\r\n                            currentUserErrorCode: currentUserErrorCode\r\n                        }\r\n                    }\r\n                    )\r\n\r\n                    const postList = _that.state.postCampaignsData.length ? (\r\n                        _that.state.postCampaignsData.map((post, id) => {\r\n                            let dateCreated = new Date(post.createdOn);\r\n                            let dateUpdated = new Date(post.updatedOn);\r\n                            let switchStatus = post.active;\r\n                            return (\r\n                                {\r\n                                    id: id+1,\r\n                                    label: post.label,\r\n                                    description: post.description,\r\n                                    createdOn: dateCreated.toString().substring(0, 28),\r\n                                    updatedOn: dateUpdated.toString().substring(0, 28),\r\n                                    status:\r\n                                        <Fragment> \r\n                                            <CampaignStatus selectedcampaignId={post.id} selectedcampaignStatus={post.active} />\r\n                                        </Fragment>,\r\n                                    action:\r\n                                        <Fragment>\r\n                                            <EditCampaign channelData={postcampaigns} selectedSubscriptionId={post.id} selectedSubscriptionName={post.label} selectedChannelName={post?.channel?.label} selectedDescription={post.description} campaignDataToGetChannelData={post} />\r\n                                        </Fragment>\r\n                                }\r\n                            )\r\n                        })\r\n                    ) : []\r\n\r\n                    _that.setState(prevState=>{\r\n                        // console.log(\"prev postli==>\", prevState)\r\n                        return {\r\n                            data: postList,\r\n                            currentUserErrorCode: currentUserErrorCode\r\n                        }\r\n                    }\r\n                    )\r\n                    \r\n                })\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        // Sign off user\r\n        if (this.state?.currentUserErrorCode == \"2\") {\r\n            window.location.href = \"/login\";\r\n            localStorage.removeItem(\"currentUser\")\r\n        }\r\n\r\n        return (\r\n            <div style={{ backgroundColor: \"#fff\", height: \"1200px\" }}>\r\n\r\n                <AddCampaign channelData={this.state.channelData} />\r\n\r\n                <br /><br />\r\n                <GetAllCampaignDataTables posts={ this.state.data } />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Campaign;"],"sourceRoot":""}